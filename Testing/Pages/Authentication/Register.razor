@page "/register"
@using Model
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager navManager
@inject IJSRuntime js

<div class="col-lg-4 offset-lg-4 pb-4 border">
    <div class="mb-3 text-center">
        <h3>Register</h3>
    </div>
    <div class="mb-3">
        <label class="form-label">User Name</label>
        <input @bind="model.UserName" type="text" class="form-control" placeholder="User Name" />
    </div>
    <div class="mb-3">
        <label class="form-label">Password</label>
        <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
    </div>
    <div class="mb-3">
        <label class="form-label">Role</label>
        <input @bind="model.Role" type="text" class="form-control" placeholder="Role" />
    </div>
    <div class="mb-3">
        <button @onclick="PerformRegister" class="btn btn-primary">Register</button>
    </div>
</div>

@code {
    private Register_Model model = new Register_Model();

    protected override void OnInitialized()
    {
        // Get the email from the query string
        var emailQuery = navManager.ToAbsoluteUri(navManager.Uri).Query;
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(emailQuery).TryGetValue("email", out var email))
        {
            model.Email = email;
        }
    }

    private async Task PerformRegister()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ServerAPI");
            var response = await httpClient.PostAsJsonAsync("api/auth/register", model);

            if (response.IsSuccessStatusCode)
            {
                navManager.NavigateTo("/login");
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                await js.InvokeVoidAsync("alert", $"Registration failed: {content}");
                Console.WriteLine($"Error: {response.StatusCode}, {response.ReasonPhrase}, {content}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception occurred: {ex.Message}");
            await js.InvokeVoidAsync("alert", "An error occurred while registering. Please try again later.");
        }
    }
}
